rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Fonction pour vérifier si l'utilisateur est admin
    function isAdmin() {
      return request.auth != null && request.auth.token.email.matches('.*admin@.*');
    }

    // Règles pour la collection books
    match /books/{bookId} {
      allow read: if true;  // Tout le monde peut lire les livres
      allow write: if isAdmin();  // Seuls les admins peuvent modifier
    }
    
    // Règles pour les demandes
    match /requests/{requestId} {
      allow read: if request.auth != null;  // Utilisateurs authentifiés peuvent lire
      allow create: if request.auth != null;  // Utilisateurs authentifiés peuvent créer
      allow update: if request.auth != null && (
        isAdmin() || 
        resource.data.userId == request.auth.uid
      );  // Les admins et le propriétaire de la demande peuvent modifier
      allow delete: if isAdmin();  // Seuls les admins peuvent supprimer
    }
    
    // Règles pour la bibliothèque des utilisateurs
    match /users/{userId}/library/{bookId} {
      allow read: if request.auth != null && request.auth.uid == userId;  // L'utilisateur peut lire sa propre bibliothèque
      allow create: if request.auth != null && (
        request.auth.uid == userId ||  // L'utilisateur peut ajouter des livres à sa bibliothèque
        isAdmin()  // Les admins peuvent ajouter des livres à la bibliothèque de n'importe quel utilisateur
      );
      allow update, delete: if request.auth != null && request.auth.uid == userId;  // L'utilisateur peut gérer sa propre bibliothèque
    }

    // Règles pour la collection users
    match /users/{userId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && request.auth.uid == userId;
      allow update: if request.auth != null && (
        request.auth.uid == userId ||
        isAdmin()
      );
      allow delete: if isAdmin();
    }
  }
} 